"
pollissimo <- value[which(value$nobs >= threshold),c("ID"))]
pollissimo <- value[which(value$nobs >= threshold),c("ID")]
pollissimo <- value[which(value$nobs >= threshold),]
View(pollissimo)
aaa <- pollissimo$ID
pollissimo <- value[which(value$nobs >= threshold),]$ID
ciccio <- value[which(value$nobs >= threshold),]$ID
ciccio
ciccio[3]
check <- data_save[+]
View(data_save)
check <- data_save[which(data_save$ID in ciccio),]
check <- subset(data_save, ID %in% ciccio)
View(check)
source("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/source/corr.R")
source("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/source/corr.R")
cr <- corr("specdata", 150)
head(cr)
source("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/source/corr.R")
cr <- corr("specdata", 150)
head(cr)
for (i in ciccio){print(i)}
vectore[100] <- 3
list_of_ids <- value[which(value$nobs >= threshold),]$ID
list_of_ids
data_filtered <- subset(data, ID %in% list_of_ids)
data_filtered <- subset(data_save, ID %in% list_of_ids)
data_filtered_clean <- data_filtered[complete.cases(data_filtered),]
for (i in list_of_ids) {
data_filtered_clean_u <- data_filtered_clean[which(data_filtered_clean$ID == i),]
name <- paste("cor_",i,sep = "")
assign(name, cor(data_filtered_clean_u$sulfate, data_filtered_clean_u$nitrate))
}
for (i in list_of_ids) {
data_filtered_clean_u <- data_filtered_clean[which(data_filtered_clean$ID == i),]
name <- paste("cor_",i,sep = "")
assign(name, cor(data_filtered_clean_u$sulfate, data_filtered_clean_u$nitrate))
}
threshold <- 150
list_of_ids <- value[which(value$nobs >= threshold),]$ID
data_filtered <- subset(data_save, ID %in% list_of_ids)
data_filtered_clean <- data_filtered[complete.cases(data_filtered),]
for (i in list_of_ids) {
data_filtered_clean_u <- data_filtered_clean[which(data_filtered_clean$ID == i),]
name <- paste("cor_",i,sep = "")
assign(name, cor(data_filtered_clean_u$sulfate, data_filtered_clean_u$nitrate))
}
vec <- 1
vec <- 2
vec <- 3
vec
vec <- 1
vec <- vec+2
vec
vec <- c(vec,3)
ve
vec
c2or <- vector()
c2or
source("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/source/corr.R")
cr <- corr("specdata", 150)
source("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/source/corr.R")
source("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/source/complete.r")
cr <- corr("specdata", 150)
source("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/source/corr.R")
cr <- corr("specdata", 150)
head(cr)
summary (cr)
cr <- corr("specdata", 400)
head(cr)
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
source("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/source/corr_ok.R")
source("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/source/corr_ok.R")
source("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/source/complete_ok.R")
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
View(complete)
source("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/source/corr_ok.R")
source("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/source/complete_ok.R")
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
source("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/source/complete.R")
source("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/source/corr.R")
source("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/source/complete.R")
source("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/source/corr.R")
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
View(cc)
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
source("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/source/corr.R")
source("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/source/complete.R")
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
pollo <- function() x
pollo
pollo(x)
x <- 2
pollo(x)
pollo
View(pollo)
function() x
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <-
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
makeVector(c(1,2,3))
makeVector(x = c(1,2,3))
x <- c(1,2,3)
makeVector(x)
getmean(x)
makeVector$getmean(x)
x <- matric(1:4,2,2)
x <- matrix(1:4,2,2)
x
solve(x)
## makeVector creates a special "vector", which is really a list containing a function to:
## 1. set the value of the vector
## 2. get the value of the vector
## 3. set the value of the mean
## 4. get the value of the mean
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
View(cachemean)
x
vect <- c(1,2,3,4)
cachemean(vect)
makeVector(vect)
cachemean(vect)
cachemean()
function(x) print(x)
fun <- function(x) print(x)
fun('ciao')
pollo <- function() x
pollo('ciao1')
pollo()
x
solve(pollo)
pollo
x
solve(x)
big <- matrix(1:100)
big
solve(big)
big <- matrix(1:1000,100,100)
solve(big)
big
View(big)
big <- matrix(rannor(),100,100)
big <- matrix(rnorm(1000),100,100)
View(big)
solve(big)
big <- matrix(rnorm(81),9,9)
solve(big)
makeVector <- function(x = numeric()) {
m <- NULL
# set the value of the vector
set <- function(y) {
x <<- y
m <<- NULL
}
# get the value of the vector
get <- function() x
# set the mean
setmean <- function(mean) m <<- mean
# get the mean
getmean <- function() m
# build the list
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
cachemean <- function(x, ...) {
# get the mean from cache
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
vect <- c(1,2,3)
mean(vect)
makeVector(vect)
x$getmean
vect$getmean
cachemean(vect)
vect
makeVector(x = vect)
cachemean(vect)
cachemean(x)
m
vect$1
vect$[1]
vect$[1]x
x$
;
inv <- NULL
inv
inv = NULL
inv
makeCacheMatrix <- function(x = matrix()) {
# set inv to NULL
inv <- NULL
# set the value of the matrix
set <- function(y) {
x <<- y
inv <<- NULL
}
# get the value of the matrix
get <- function() x
# set the inv
setinv <- function(solve) inv <<- solve
# get the inv
getinv <- function() inv
# build the list
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
class(inv)
inv <- matrix(NULL)
nullm <- matrix(data=NA,nrow=3,ncol=3)
View(nullm)
is.null(nullm)
is.na(nullm)
as.character(is.na(nullm))
all(is.na(nullm))
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
# let's get the inv from cache
inv <- x$getinv()
if (!all(is.na(inv))) {
message("getting cached inv")
return(inv)
}
matrix <- x$get()
inv <- solve(matrix, ...)
x$setinv(inv)
inv
}
source("C:/Users/Gabriele/Documents/Git/ProgrammingAssignment2/cachematrix.R")
t_matrix <- matrix(1:9,3,3)
solve(t_matrix)
t_matrix
determinant.matrix(t_matrix)
t_matrix <- matrix(1:4,2,2)
determinant.matrix(t_matrix)
determinant(t_matrix)
solve(t_matrix)
det(t_matrix)
t_matrix <- matrix(1:9,3,3)
det(t_matrix)
t_matrix <- matrix(1:28,3,3)
t_matrix
t_matrix <- matrix(runif(9),3,3)
t_matrix
det(t_matrix)
solve(t_matrix)
t_matrix <- matrix(runif(9),3,3)
source("C:/Users/Gabriele/Documents/Git/ProgrammingAssignment2/cachematrix.R")
makeCacheMatrix()
cacheSolve(t_matrix)
cacheSolve(t_matrix, ...)
b1 <- makeCacheMatrix(t_matrix)
View(b1)
cacheSolve(t_matrix)
cacheSolve(b1)
solve(t_matrix)
makeCacheMatrix <- function(x = matrix()) {
## we are assigning a value null to the inv mat as a net mat is passed in argumnt
inverse_matrix <- NULL
## set the new matrix and assign null to inverse_matrix as it is new matrix
set <- function(y){
x <<-y
inverse_matrix <<- NULL
}
## getting the vnew matrix
get <- function()x
## give the calue of argument to the inverse_matrix
setinv_mat <- function(inver_mat){
inverse_matrix <<- inver_mat
}
## get the value of inverse_matrix stored
getinv_mat <- function()inverse_matrix
## return a list with variable name as function names so that we can use $
## operation in cacheSolve()
list(set = set,
get = get,
setinv_mat = setinv_mat,
getinv_mat = getinv_mat)
}
## this funciton will calculate and cache the inverse of the matrix passed as an
## argument to it.
## Return a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...) {
## get the inverse of matrix if already cache(if no new matrix is passed)
inverse <- x$getinv_mat()
## if the inverse is not null , return the same to the function
if(!is.null(inverse)){
message("getting cached inverse matrix")
return(inverse)
}
## else invert the matrix and return the inverted matrix
data <- x$get()
inverse <- solve(data)
x$setinv_mat(inverse)
inverse
}
b1 <- makeCacheMatrix(t_matrix)
cacheSolve(b1)
t_matrix <- matrix(runif(9),3,3)
b1 <- makeCacheMatrix(t_matrix)
cacheSolve(b1)
View(makeCacheMatrix)
View(cacheSolve)
View(t_matrix)
View(b1)
View(t_matrix)
solve(t_matrix)
inver_mat(t_matrix)
str(t_matrix)
str(b1)
k = {print(10);5}
print(k)
downfile <- download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
downfile <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
fileUrl <- https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
getwd()
setwd("C:\Users\Gabriele\Documents\Git\JHSPH-Data-Science\data\miscellaneous")
setwd("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/data/miscellaneous")
getwd()
downfile <- download.file(fileUrl,destfile = 'idahosurver.csv')
surveyData <- read.table("idahosurver.csv",sep = ',', header = TRUE)
View(surveyData)
bigvalue <- surveyData[which(surveyData$VAL == 24)]
bigvalue <- surveyData[which(surveyData$VAL == 24),]
summary(surveyData$FES)
str(surveyData$FES)
library(xlsx)
install.packages("xlsimple"x)
install.packages(xlsx)
install.packages(XLSX)
install.packages("xlsx")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl,destfile = 'NGAP.xlsx')
dat <- read.xlsx('NGAP.xlsx', sheetIndex = 1, rowIndex = 18:23, colIndex = 7:15, header = TRUE)
library(xlsx)
library("xlsx)
sad
ds
asd
asd
q
q
e1
wqe
)
;
q
""
"
library(xlsx)
dat <- read.xlsx("NGAP.xlsx", sheetIndex = 1, rowIndex = 18:23, colIndex = 7:15, header = TRUE)
install.packages("xlsx")
library(xlsx)
require(xlsx)
require(xlsx)
dat <- read.xlsx("NGAP.xlsx", sheetIndex = 1, rowIndex = 18:23, colIndex = 7:15, header = TRUE)
dat <- read.xlsx("NGAP.xlsx", rowIndex = 18:23, colIndex = 7:15, header = TRUE)
dat <- read.xlsx("gov_NGAP.xlsx", rowIndex = 18:23, colIndex = 7:15, header = TRUE)
dat <- read.xlsx("gov_NGAP.xlsx", sheetIndex = 1, rowIndex = 18:23, colIndex = 7:15, header = TRUE)
sum(dat$Zip*dat$Ext,na.rm=T)
install.packages("XML")
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl,useInternalNodes = TRUE)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
doc <- xmlTreeParse(fileUrl,useInternalNodes =TRUE)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl,destfile = 'survey2.csv')
library(data.table)
require(data.tabel)
DT <- fread("survey2.csv")
install.packages("data.table")
library(data.table)
DT <- fread("survey2.csv")
View(DT)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time()
a <- mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
a
system.time(a)
a <- mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
b <- rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
c <- DT[,mean(pwgtp15),by=SEX]
d <- tapply(DT$pwgtp15,DT$SEX,mean)
e <- sapply(split(DT$pwgtp15,DT$SEX),mean)
f <- mean(DT$pwgtp15,by=DT$SEX)
system.time(a)
system.time(b)
system.time(c)
system.time(d)
system.time(e)
system.time(f)
system.time(a <- mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
a
system.time(fread("survey2.csv"))
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1])
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
rowMeans(DT)[DT$SEX==1];
rowMeans(DT)[DT$SEX==1]
rowMeans(DT)[DT$SEX==1,]
rowMeans(DT)[,DT$SEX==1]
rowMeans(DT)[DT$SEX==1]
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
mean(DT$pwgtp15,by=DT$SEX)
sapply(split(DT$pwgtp15,DT$SEX),mean)
tapply(DT$pwgtp15,DT$SEX,mean)
DT[,mean(pwgtp15),by=SEX]
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
rowMeans(DT$pwgtp15)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
?system.time
