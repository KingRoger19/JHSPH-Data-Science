setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
makeVector(c(1,2,3))
makeVector(x = c(1,2,3))
x <- c(1,2,3)
makeVector(x)
getmean(x)
makeVector$getmean(x)
x <- matric(1:4,2,2)
x <- matrix(1:4,2,2)
x
solve(x)
## makeVector creates a special "vector", which is really a list containing a function to:
## 1. set the value of the vector
## 2. get the value of the vector
## 3. set the value of the mean
## 4. get the value of the mean
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
View(cachemean)
x
vect <- c(1,2,3,4)
cachemean(vect)
makeVector(vect)
cachemean(vect)
cachemean()
function(x) print(x)
fun <- function(x) print(x)
fun('ciao')
pollo <- function() x
pollo('ciao1')
pollo()
x
solve(pollo)
pollo
x
solve(x)
big <- matrix(1:100)
big
solve(big)
big <- matrix(1:1000,100,100)
solve(big)
big
View(big)
big <- matrix(rannor(),100,100)
big <- matrix(rnorm(1000),100,100)
View(big)
solve(big)
big <- matrix(rnorm(81),9,9)
solve(big)
makeVector <- function(x = numeric()) {
m <- NULL
# set the value of the vector
set <- function(y) {
x <<- y
m <<- NULL
}
# get the value of the vector
get <- function() x
# set the mean
setmean <- function(mean) m <<- mean
# get the mean
getmean <- function() m
# build the list
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
cachemean <- function(x, ...) {
# get the mean from cache
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
vect <- c(1,2,3)
mean(vect)
makeVector(vect)
x$getmean
vect$getmean
cachemean(vect)
vect
makeVector(x = vect)
cachemean(vect)
cachemean(x)
m
vect$1
vect$[1]
vect$[1]x
x$
;
inv <- NULL
inv
inv = NULL
inv
makeCacheMatrix <- function(x = matrix()) {
# set inv to NULL
inv <- NULL
# set the value of the matrix
set <- function(y) {
x <<- y
inv <<- NULL
}
# get the value of the matrix
get <- function() x
# set the inv
setinv <- function(solve) inv <<- solve
# get the inv
getinv <- function() inv
# build the list
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
class(inv)
inv <- matrix(NULL)
nullm <- matrix(data=NA,nrow=3,ncol=3)
View(nullm)
is.null(nullm)
is.na(nullm)
as.character(is.na(nullm))
all(is.na(nullm))
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
# let's get the inv from cache
inv <- x$getinv()
if (!all(is.na(inv))) {
message("getting cached inv")
return(inv)
}
matrix <- x$get()
inv <- solve(matrix, ...)
x$setinv(inv)
inv
}
source("C:/Users/Gabriele/Documents/Git/ProgrammingAssignment2/cachematrix.R")
t_matrix <- matrix(1:9,3,3)
solve(t_matrix)
t_matrix
determinant.matrix(t_matrix)
t_matrix <- matrix(1:4,2,2)
determinant.matrix(t_matrix)
determinant(t_matrix)
solve(t_matrix)
det(t_matrix)
t_matrix <- matrix(1:9,3,3)
det(t_matrix)
t_matrix <- matrix(1:28,3,3)
t_matrix
t_matrix <- matrix(runif(9),3,3)
t_matrix
det(t_matrix)
solve(t_matrix)
t_matrix <- matrix(runif(9),3,3)
source("C:/Users/Gabriele/Documents/Git/ProgrammingAssignment2/cachematrix.R")
makeCacheMatrix()
cacheSolve(t_matrix)
cacheSolve(t_matrix, ...)
b1 <- makeCacheMatrix(t_matrix)
View(b1)
cacheSolve(t_matrix)
cacheSolve(b1)
solve(t_matrix)
makeCacheMatrix <- function(x = matrix()) {
## we are assigning a value null to the inv mat as a net mat is passed in argumnt
inverse_matrix <- NULL
## set the new matrix and assign null to inverse_matrix as it is new matrix
set <- function(y){
x <<-y
inverse_matrix <<- NULL
}
## getting the vnew matrix
get <- function()x
## give the calue of argument to the inverse_matrix
setinv_mat <- function(inver_mat){
inverse_matrix <<- inver_mat
}
## get the value of inverse_matrix stored
getinv_mat <- function()inverse_matrix
## return a list with variable name as function names so that we can use $
## operation in cacheSolve()
list(set = set,
get = get,
setinv_mat = setinv_mat,
getinv_mat = getinv_mat)
}
## this funciton will calculate and cache the inverse of the matrix passed as an
## argument to it.
## Return a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...) {
## get the inverse of matrix if already cache(if no new matrix is passed)
inverse <- x$getinv_mat()
## if the inverse is not null , return the same to the function
if(!is.null(inverse)){
message("getting cached inverse matrix")
return(inverse)
}
## else invert the matrix and return the inverted matrix
data <- x$get()
inverse <- solve(data)
x$setinv_mat(inverse)
inverse
}
b1 <- makeCacheMatrix(t_matrix)
cacheSolve(b1)
t_matrix <- matrix(runif(9),3,3)
b1 <- makeCacheMatrix(t_matrix)
cacheSolve(b1)
View(makeCacheMatrix)
View(cacheSolve)
View(t_matrix)
View(b1)
View(t_matrix)
solve(t_matrix)
inver_mat(t_matrix)
str(t_matrix)
str(b1)
myData <- read.csv("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/data/miscellaneous/getdata_data_ss06hid.csv")
library(dplyr)
agricultureLogical <- which(myData$AGS == 6 & myData$ACR == 3)
agricultureLogical
img <- readJPEG(system.file("C:/Users/Gabriele/Pictures", "getdata_jeff.jpg", package="jpeg"))
installed.packages("jpeg")
library(jpeg)
install.packages("jpeg")
library(jpeg)
img <- readJPEG(system.file("C:/Users/Gabriele/Pictures", "getdata_jeff.jpg", package="jpeg"))
img <- readJPEG(system.file("C:/Users/Gabriele/Pictures/", "getdata_jeff.jpg", package="jpeg"))
test <- readJPEG("C:/Users/Gabriele/Pictures/getdata_jeff.jpg")
plot(1, type="n", xlim=c(100, 200), ylim=c(300, 350))
rasterImage(test,100, 300, 150, 350)
test <- readJPEG("C:/Users/Gabriele/Pictures/getdata_jeff.jpg", native = TREU)
test <- readJPEG("C:/Users/Gabriele/Pictures/getdata_jeff.jpg", native = TRUE)
plot(1, type="n", xlim=c(100, 200), ylim=c(300, 350))
rasterImage(test,100, 300, 150, 350)
quantile(test,0.3,0.8)
quantile(test,probs = c(0.3,0.8))
myData <- read.csv("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/data/miscellaneous/getdata_data_GDP.csv")
myDataEdu <- read.csv("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/data/miscellaneous/getdata_data_EDSTATS_Country.csv")
View(myData)
View(myDataEdu)
View(myData)
View(myDataEdu)
View(myData)
merged <- merge(myData, myDataEdu, by.x = "X", by.y = "CountryCode")
View(merged)
merged <- merge(myData, myDataEdu, by.x = "X", by.y = "CountryCode", all = TRUE)
merged <- merge(myData, myDataEdu, by.x = "X", by.y = "CountryCode")
merged_sorted <- arrange(merged, desc(GDP))
merged_sorted <- arrange(merged, desc(Gross.domestic.product.2012))
View(merged_sorted)
merged <- filter(merged, !is.na(X))
View(merged)
myData <- myData[!is.na(X)]
myData <- myData[!is.na(myData$X)]
myData <- filter(myData, !is.na(X))
View(myData)
str(myData)
myData <- filter(myData, is.na(X))
View(myDataEdu)
View(myData)
myData <- read.csv("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/data/miscellaneous/getdata_data_GDP.csv")
myData2 <- filter(myData, X != "")
View(myData2)
merged <- merge(myData2, myDataEdu, by.x = "X", by.y = "CountryCode")
View(merged)
myData2 <- filter(myData, X != "" & Gross.domestic.product.2012 != "")
merged <- merge(myData2, myDataEdu, by.x = "X", by.y = "CountryCode")
merged_sorted <- arrange(merged, desc(Gross.domestic.product.2012))
View(merged_sorted)
merged2 <- mutate(merged, GDP = as.numeric(Gross.domestic.product.2012))
View(merged2)
merged_sorted <- arrange(merged2, desc(GDP))
View(merged_sorted)
merged2 <- mutate(merged, GDP = as.numeric(as.character(Gross.domestic.product.2012))
)
View(merged2)
merged_sorted <- arrange(merged2, desc(GDP))
View(merged_sorted)
str(merged_sorted)
ds1 <- mutate(merged_sorted, Income = as.numeric(as.character(X.3))
)
View(merged)
View(ds1)
View(ds1)
str(ds1)
summarize(ds1, media = avg(Income))
summarize(ds1, media = mean(Income))
summarize(merged_sorted, media = mean(X.3))
ds1 <- mutate(merged_sorted, Income = as.numeric(gsub(",","",as.character(X.3))))
View(ds1)
summarize(ds1, media = mean(Income))
ds1 %>% group_by(Income.Group) %>% summarize(media = mean(Income))
ds1 %>% group_by(Income.Group) %>% summarize(media = mean(GDP))
quantile(ds1$GDP)
ds1 %>% gaher(Income.Group, quantile(GDP))
ds1 %>% gather(Income.Group, quantile(GDP))
ds1 %>% gather(Income.Group, quantile(GDP))
library(dplyr)
ds1 %>% gather(Income.Group, quantile(GDP))
gather(ds1, Income.Group, quantile(GDP))
library(tidyr)
gather(ds1, Income.Group, quantile(GDP))
crosstab <- xtabs(Income.Group~quantile(GDP), data = ds1)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
, 'ACS.csv'
, method='curl' )
# Read data into data.frame
ACS <- read.csv('ACS.csv')
strsplit(names(ACS),"wgtp")
View(ACS)
strsplit(names(ACS),"wgtp")
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, 'GDP.csv'
, method='curl' )
# Read data into data.frame
GDP <- read.csv('GDP.csv')
View(GDP)
GDP$Import <- gsub(",","",GDP$X.3)
mean(GDP$Import)
mean(GDP$Import, na.rm = TRUE)
mean(GDP$Import, !is.na = TRUE)
mean(GDP$Import, !is.na(Import) = TRUE)
mean(GDP$Import, na.rm = TRUE)
GDP$Import <- as.numeric(gsub(",","",GDP$X.3))
mean(GDP$Import, na.rm = TRUE)
mean(GDP$Import, na.rm = FALSE)
mean(GDP$Import, na.rm = TRUE)
GDP$Import <- as.integer(gsub(",","",GDP$X.3))
mean(GDP$Import, na.rm = TRUE)
mean(GDP$Import)
View(ACS)
View(GDP)
GDPrank <- data.table::fread('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, skip=5
, nrows=190
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Country", "GDP")
)
# Remove the commas using gsub
# Convert to integer after removing commas.
# Take mean of GDP column (I know this code may look a little confusing)
GDPrank[, mean(as.integer(gsub(pattern = ',', replacement = '', x = GDP )))]
GDPrank <- data.table::fread('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, skip=5
, nrows=190
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Country", "GDP")
)
eduDT <- data.table::fread('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv')
mergedDT <- merge(GDPrank, eduDT, by = 'CountryCode')
View(mergedDT)
mergedDT[grepl(pattern = "Fiscal year end: June 30;", mergedDT[, `Special Notes`]), .N]
mergedDT[grepl(pattern = "Fiscal year end: June 30;", mergedDT[, `Special Note`]), .N]
mergedDT[grepl(pattern = "Fiscal year end: June 30;", mergedDT[, Special Notes]), .N]
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
library(quantmod)
installed.packages("quantmod")
installed.packages(quantmod)
install.packages('quantmod')
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(amzn)
sampleTimes
x <- year(sampleTimes) == 2012
library(lubridate)
a=mdy(sampleTimes)
installed.packages('lubridate')
install.packages('lubridate')
library(lubridate)
a=mdy(sampleTimes)
timeDT <- data.table::data.table(timeCol = sampleTimes)
View(timeDT)
timeDT <- data.table(timeCol = sampleTimes)
timeDT[(timeCol >= "2012-01-01") & (timeCol) < "2013-01-01", .N ]
timeDT[(timeCol >= "2012-01-01") & (timeCol) < "2013-01-01",]
timeDT[(timeCol >= "2012-01-01") & (timeCol) < "2013-01-01", .]
timeDT[(timeCol >= "2012-01-01") & (timeCol) < "2013-01-01", N]
timeDT[(timeCol >= "2012-01-01") & (timeCol) < "2013-01-01", .N]
library(data.table)
timeDT <- data.table(timeCol = sampleTimes)
swirl()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
this_day = today()
this_day <- today()
this_day
year(this_day)
wday(tthis_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
dt1
dt1 <- now()
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
dt2 <- c(this_day, this_day+1, this_day+2)
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(hour = hour(now()), minutes = minute(now()), seconds = second(now()))
this_moment <- update(hours = hour(now()), minutes = minute(now()), seconds = second(now()))
this_moment <- update(this_moment, hours = hour(now()), minutes = minute(now()), seconds = second(now()))
this_moment
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?whit_tz
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- with_tz(mdy("June 17, 2008"), tzone = "Singaport")
last_time <- with_tz(mdy("June 17, 2008"), tzone = "Singapore")
last_time <- mdy("June 17, 2008", tzone = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval()
?interval
how_long <- interval(arrive, last_time)
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch <- now()
stopwatch()
quit
q
q)
q()
exit()
bye
bye8)
bye()
source("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/source/W4-Exam/run_analysis.R")
path <- getwd()
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url, file.path(path, "dataFiles.zip"))
unzip(zipfile = "dataFiles.zip")
