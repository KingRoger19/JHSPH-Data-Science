str(myData)
myData <- filter(myData, is.na(X))
View(myDataEdu)
View(myData)
myData <- read.csv("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/data/miscellaneous/getdata_data_GDP.csv")
myData2 <- filter(myData, X != "")
View(myData2)
merged <- merge(myData2, myDataEdu, by.x = "X", by.y = "CountryCode")
View(merged)
myData2 <- filter(myData, X != "" & Gross.domestic.product.2012 != "")
merged <- merge(myData2, myDataEdu, by.x = "X", by.y = "CountryCode")
merged_sorted <- arrange(merged, desc(Gross.domestic.product.2012))
View(merged_sorted)
merged2 <- mutate(merged, GDP = as.numeric(Gross.domestic.product.2012))
View(merged2)
merged_sorted <- arrange(merged2, desc(GDP))
View(merged_sorted)
merged2 <- mutate(merged, GDP = as.numeric(as.character(Gross.domestic.product.2012))
)
View(merged2)
merged_sorted <- arrange(merged2, desc(GDP))
View(merged_sorted)
str(merged_sorted)
ds1 <- mutate(merged_sorted, Income = as.numeric(as.character(X.3))
)
View(merged)
View(ds1)
View(ds1)
str(ds1)
summarize(ds1, media = avg(Income))
summarize(ds1, media = mean(Income))
summarize(merged_sorted, media = mean(X.3))
ds1 <- mutate(merged_sorted, Income = as.numeric(gsub(",","",as.character(X.3))))
View(ds1)
summarize(ds1, media = mean(Income))
ds1 %>% group_by(Income.Group) %>% summarize(media = mean(Income))
ds1 %>% group_by(Income.Group) %>% summarize(media = mean(GDP))
quantile(ds1$GDP)
ds1 %>% gaher(Income.Group, quantile(GDP))
ds1 %>% gather(Income.Group, quantile(GDP))
ds1 %>% gather(Income.Group, quantile(GDP))
library(dplyr)
ds1 %>% gather(Income.Group, quantile(GDP))
gather(ds1, Income.Group, quantile(GDP))
library(tidyr)
gather(ds1, Income.Group, quantile(GDP))
crosstab <- xtabs(Income.Group~quantile(GDP), data = ds1)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
, 'ACS.csv'
, method='curl' )
# Read data into data.frame
ACS <- read.csv('ACS.csv')
strsplit(names(ACS),"wgtp")
View(ACS)
strsplit(names(ACS),"wgtp")
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, 'GDP.csv'
, method='curl' )
# Read data into data.frame
GDP <- read.csv('GDP.csv')
View(GDP)
GDP$Import <- gsub(",","",GDP$X.3)
mean(GDP$Import)
mean(GDP$Import, na.rm = TRUE)
mean(GDP$Import, !is.na = TRUE)
mean(GDP$Import, !is.na(Import) = TRUE)
mean(GDP$Import, na.rm = TRUE)
GDP$Import <- as.numeric(gsub(",","",GDP$X.3))
mean(GDP$Import, na.rm = TRUE)
mean(GDP$Import, na.rm = FALSE)
mean(GDP$Import, na.rm = TRUE)
GDP$Import <- as.integer(gsub(",","",GDP$X.3))
mean(GDP$Import, na.rm = TRUE)
mean(GDP$Import)
View(ACS)
View(GDP)
GDPrank <- data.table::fread('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, skip=5
, nrows=190
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Country", "GDP")
)
# Remove the commas using gsub
# Convert to integer after removing commas.
# Take mean of GDP column (I know this code may look a little confusing)
GDPrank[, mean(as.integer(gsub(pattern = ',', replacement = '', x = GDP )))]
GDPrank <- data.table::fread('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, skip=5
, nrows=190
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Country", "GDP")
)
eduDT <- data.table::fread('http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv')
mergedDT <- merge(GDPrank, eduDT, by = 'CountryCode')
View(mergedDT)
mergedDT[grepl(pattern = "Fiscal year end: June 30;", mergedDT[, `Special Notes`]), .N]
mergedDT[grepl(pattern = "Fiscal year end: June 30;", mergedDT[, `Special Note`]), .N]
mergedDT[grepl(pattern = "Fiscal year end: June 30;", mergedDT[, Special Notes]), .N]
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
library(quantmod)
installed.packages("quantmod")
installed.packages(quantmod)
install.packages('quantmod')
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(amzn)
sampleTimes
x <- year(sampleTimes) == 2012
library(lubridate)
a=mdy(sampleTimes)
installed.packages('lubridate')
install.packages('lubridate')
library(lubridate)
a=mdy(sampleTimes)
timeDT <- data.table::data.table(timeCol = sampleTimes)
View(timeDT)
timeDT <- data.table(timeCol = sampleTimes)
timeDT[(timeCol >= "2012-01-01") & (timeCol) < "2013-01-01", .N ]
timeDT[(timeCol >= "2012-01-01") & (timeCol) < "2013-01-01",]
timeDT[(timeCol >= "2012-01-01") & (timeCol) < "2013-01-01", .]
timeDT[(timeCol >= "2012-01-01") & (timeCol) < "2013-01-01", N]
timeDT[(timeCol >= "2012-01-01") & (timeCol) < "2013-01-01", .N]
library(data.table)
timeDT <- data.table(timeCol = sampleTimes)
swirl()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
this_day = today()
this_day <- today()
this_day
year(this_day)
wday(tthis_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
dt1
dt1 <- now()
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
dt2 <- c(this_day, this_day+1, this_day+2)
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(hour = hour(now()), minutes = minute(now()), seconds = second(now()))
this_moment <- update(hours = hour(now()), minutes = minute(now()), seconds = second(now()))
this_moment <- update(this_moment, hours = hour(now()), minutes = minute(now()), seconds = second(now()))
this_moment
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?whit_tz
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- with_tz(mdy("June 17, 2008"), tzone = "Singaport")
last_time <- with_tz(mdy("June 17, 2008"), tzone = "Singapore")
last_time <- mdy("June 17, 2008", tzone = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval()
?interval
how_long <- interval(arrive, last_time)
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch()
stopwatch <- now()
stopwatch()
quit
q
q)
q()
exit()
bye
bye8)
bye()
ds_training <- read.table("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/data/W4-Exam/UCI HAR Dataset/train/X_train.txt", header = FALSE, sep = "", dec = ".")
View(ds_training)
ds_test <- read.table("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/data/W4-Exam/UCI HAR Dataset/train/X_test.txt", header = FALSE, sep = "", dec = ".")
ds_test <- read.table("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/data/W4-Exam/UCI HAR Dataset/test/X_test.txt", header = FALSE, sep = "", dec = ".")
ds_train_X <- read.table("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/data/W4-Exam/UCI HAR Dataset/train/X_train.txt",
header = FALSE, sep = "", dec = ".")
ds_train_Y <- read.table("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/data/W4-Exam/UCI HAR Dataset/train/y_train.txt",
header = FALSE, sep = "", dec = ".")
ds_test_X <- read.table("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/data/W4-Exam/UCI HAR Dataset/test/X_test.txt",
header = FALSE, sep = "", dec = ".")
ds_test_Y <- read.table("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/data/W4-Exam/UCI HAR Dataset/test/y_test.txt",
header = FALSE, sep = "", dec = ".")
ds_training <- ds_training_X
ds_training$y_col <- ds_training_Y
ds_test <- ds_test_X
ds_test$y_col <- ds_test_Y
ds_train <- ds_train_X
ds_train$y_col <- ds_train_Y
ds_test <- ds_test_X
ds_test$y_col <- ds_test_Y
View(ds_train)
setwd("C:/Users/Gabriele/Documents/Git/JHSPH-Data-Science/data/W4-Exam/UCI HAR Dataset")
ds_train_X <- read.table("train/X_train.txt", header = FALSE, sep = "", dec = ".")
ActivityLabels <- read.table("UCI HAR Dataset/activity_labels.txt", header = FALSE, sep = "", dec = ".",
col.names = c("classLabels", "activityName"))
ActivityLabels <- read.table("activity_labels.txt", header = FALSE, sep = "", dec = ".",
col.names = c("classLabels", "activityName"))
View(ActivityLabels)
Features <- read.table("features.txt", header = FALSE, sep = "", dec = ".", col.names = c("ID", "FeatureName"))
# subset of all the feature satisfying condition 2.
FeaturesFiltered <- grep("(mean|std)\\(\\)", Features[, FeatureName])
View(Features)
View(Features)
FeaturesFiltered <- grep("(mean|std)\\(\\)", Features[, FeatureName])
Features <- read.table("features.txt", header = FALSE, sep = "", dec = ".", col.names = c("ID", "FeatureName"))
FeaturesFiltered <- grep("(mean|std)\\(\\)", Features[, FeatureName])
ActivityLabels <- read.table("activity_labels.txt", header = FALSE, sep = "", dec = ".", col.names = c("ClassLabels", "ActivityName"))
# features.txt: List of all features.
Features <- read.table("features.txt", header = FALSE, sep = "", dec = ".", col.names = c("ID", "FeatureName"))
# subset of all the feature satisfying condition 2.
FeaturesFiltered <- grep("(mean|std)\\(\\)", Features[, FeatureName])
View(Features)
activityLabels <- fread(file.path(path, "activity_labels.txt")
, col.names = c("classLabels", "activityName"))
features <- fread(file.path(path, "features.txt")
, col.names = c("index", "featureNames"))
featuresWanted <- grep("(mean|std)\\(\\)", features[, featureNames])
packages <- c("data.table", "reshape2")
sapply(packages, require, character.only=TRUE, quietly=TRUE)
activityLabels <- fread(file.path(path, "activity_labels.txt")
, col.names = c("classLabels", "activityName"))
features <- fread(file.path(path, "features.txt")
, col.names = c("index", "featureNames"))
featuresWanted <- grep("(mean|std)\\(\\)", features[, featureNames])
activityLabels <- fread(file.path( "activity_labels.txt")
, col.names = c("classLabels", "activityName"))
features <- fread(file.path("features.txt")
, col.names = c("index", "featureNames"))
featuresWanted <- grep("(mean|std)\\(\\)", features[, featureNames])
View(ActivityLabels)
View(activityLabels)
View(ActivityLabels)
View(activityLabels)
View(ActivityLabels)
View(features)
View(Features)
View(features)
View(Features)
View(features)
View(Features)
Features <- read.table("features.txt", header = FALSE, sep = "", dec = ".", col.names = c("ID", "FeatureName"))
View(Features)
FeaturesFiltered <- grep("(mean|std)\\(\\)", Features[, FeatureName])
View(Features)
FeaturesFiltered <- grep("(mean|std)\\(\\)", features[, FeatureName])
FeaturesFiltered <- grep("(mean|std)\\(\\)", features[, featureNames])
Features <- read.table("features.txt", header = FALSE, sep = "", dec = ".", col.names = c("ID", "FeatureName"))
FeaturesFiltered <- grep("(mean|std)\\(\\)", Features[, FeatureName])
FeaturesFiltered <- grep("(mean|std)\\(\\)", Features[, FeatureName])
FeaturesFiltered <- grep("(mean|std)\\(\\)", Features[, FeatureNames])
FeaturesFiltered <- grep("(mean|std)\\(\\)", Features[, featureName])
FeaturesFiltered <- grep("(mean|std)\\(\\)", Features[, featureNames])
FeaturesFiltered <- grep("(mean|std)\\(\\)", Features[, FeatureName])
Features <- read.table("features.txt", header = FALSE, sep = "", dec = ".", col.names = c("ID", "pollo"))
# subset of all the feature satisfying condition 2.
FeaturesFiltered <- grep("(mean|std)\\(\\)", Features[, pollo])
features <- read.table("features.txt", header = FALSE, sep = "", dec = ".", col.names = c("ID", "pollo"))
# subset of all the feature satisfying condition 2.
FeaturesFiltered <- grep("(mean|std)\\(\\)", features[, pollo])
features <- read.table("features.txt",  col.names = c("ID", "pollo"))
# subset of all the feature satisfying condition 2.
FeaturesFiltered <- grep("(mean|std)\\(\\)", features[, pollo])
Features <- read.table("features.txt", header = FALSE, sep = "", dec = ".", col.names = c("ID", "pollo"))
View(Features)
View(Features)
# subset of all the feature satisfying condition 2.
FeaturesFiltered <- grep("(mean|std)\\(\\)", features[, "pollo"])
Features <- read.table("features.txt", header = FALSE, sep = "", dec = ".", col.names = c("ID", "FeatureName"))
# subset of all the feature satisfying condition 2.
FeaturesFiltered <- grep("(mean|std)\\(\\)", features[, "FeatureName"])
# subset of all the feature satisfying condition 2.
FeaturesFiltered <- grep("(mean|std)\\(\\)", Features[, "FeatureName"])
FeaturesFiltered
measurements <- Features[FeaturesFiltered, FeatureName]
measurements <- Features[FeaturesFiltered, "FeatureName"]
measurements
str(measurements)
class(measurements)
View(Features)
measurements <- gsub('[()]', '', measurements)
measurements
str(measurements)
str(FeaturesFiltered)
class(FeaturesFiltered)
c <- FeaturesFiltered
class(c)
x <- c(1,2,3)
class(x)
train <- fread("UCI HAR Dataset/train/X_train.txt")[, featuresWanted, with = FALSE]
train <- fread("train/X_train.txt")[, featuresWanted, with = FALSE]
# features.txt: List of all features.
Features <- read.table("features.txt", header = FALSE, sep = "", dec = ".", col.names = c("ID", "FeatureName"))
# subset of all the ID satisfying condition 2.
FeaturesFiltered <- grep("(mean|std)\\(\\)", Features[, "FeatureName"])
# select only rows satisfying condition 2.
ValidMeasures <- Features[FeaturesFiltered, "FeatureName"]
# clean up the vector
ValidMeasures <- gsub('[()]', '', ValidMeasures)
train <- fread("train/X_train.txt")[, ValidMeasures, with = FALSE]
train <- read.table("train/X_train.txt")[, ValidMeasures, with = FALSE]
train <- read.table("train/X_train.txt")[, ValidMeasures]
ds_train_X <- read.table("train/X_train.txt", header = FALSE, sep = "", dec = ".")
ds_train_X <- set.names(read.table("train/X_train.txt", header = FALSE, sep = "", dec = "."), 1:561)
ds_train_X <- setNames(read.table("train/X_train.txt", header = FALSE, sep = "", dec = "."), 1:561)
View(ds_train_X)
library(dplyr)
ds_train_X %>% select(ValidMeasures)
ds_train_X %>% select(FeaturesFiltered)
ds_train_X <- ds_train_X %>% select(FeaturesFiltered)
# renaming columns
ds_train_X <- setNames(ds_train_X, ValidMeasures)
View(ds_train_X)
### X TRAIN ###
# util call columns
ds_train_X <- read.table("train/X_train.txt", header = FALSE, sep = "", dec = ".", col.names =  1:561)
View(ds_train_X)
### X TRAIN ###
# util call columns
ds_train_X <- read.table("train/X_train.txt", header = FALSE, sep = "", dec = ".", col.names =  c(1:561)
)
View(ds_train_X)
ds_train_X <- setNames(read.table("train/X_train.txt", header = FALSE, sep = "", dec = "."), 1:561)
View(ds_train_X)
ds_train_X <- setNames(read.table("train/X_train.txt", header = FALSE, sep = "", dec = "."), 1:561)
# select only columns for filtered features
ds_train_X <- ds_train_X %>% select(FeaturesFiltered)
# renaming columns
ds_train_X <- setNames(ds_train_X, ValidMeasures)
### Y TRAIN ###
TrainActivities <- file.read("train/Y_train.txt", header = FALSE, sep = "", dec = ".", col.names = c("Activity"))
TrainSubjects <- file.read("train/subject_train.txt", header = FALSE, sep = "", dec = ".", col.names = c("IDSubject"))
ds_Train <- cbind(TrainSubjects, TrainActivities, ds_train_X)
### Y TRAIN ###
TrainActivities <- read.table("train/Y_train.txt", header = FALSE, sep = "", dec = ".", col.names = c("Activity"))
TrainSubjects <- read.table("train/subject_train.txt", header = FALSE, sep = "", dec = ".", col.names = c("IDSubject"))
ds_Train <- cbind(TrainSubjects, TrainActivities, ds_train_X)
View(ds_Train)
### X TEST ###
# util call columns
ds_test_X <- setNames(read.table("test/X_test.txt", header = FALSE, sep = "", dec = "."), 1:561)
# select only columns for filtered features
ds_test_X <- ds_test_X %>% select(FeaturesFiltered)
# renaming columns
ds_test_X <- setNames(ds_test_X, ValidMeasures)
### Y TRAIN ###
TestActivities <- read.table("test/Y_test.txt", header = FALSE, sep = "", dec = ".", col.names = c("Activity"))
TestSubjects <- read.table("test/subject_test.txt", header = FALSE, sep = "", dec = ".", col.names = c("IDSubject"))
ds_Test <- cbind(TestSubjects, TestActivities, ds_test_X)
View(ds_Test)
# now that i have tidy dataset, i can append them
ds_Driver <- rbind(ds_Train, ds_Test)
combined <- ds_Driver
combined[["Activity"]] <- factor(combined[, Activity]
, levels = activityLabels[["classLabels"]]
, labels = activityLabels[["activityName"]])
combined[["SubjectNum"]] <- as.factor(combined[, SubjectNum])
combined <- reshape2::melt(data = combined, id = c("SubjectNum", "Activity"))
combined <- reshape2::dcast(data = combined, SubjectNum + Activity ~ variable, fun.aggregate = mean)
View(ds_Driver)
combined[["Activity"]] <- factor(combined[, "Activity"]
, levels = activityLabels[["classLabels"]]
, labels = activityLabels[["activityName"]])
combined[["Activity"]] <- factor(combined[, "Activity"]
, levels = ActivityLabels[["classLabels"]]
, labels = ActivityLabels[["activityName"]])
combined[["Activity"]] <- factor(combined[, "Activity"]
, levels = ActivityLabels[["ClassLabels"]]
, labels = ActivityLabels[["ActivityName"]])
#activity_labels.txt: Links the class labels with their activity name.
ActivityLabels <- read.table("activity_labels.txt", header = FALSE, sep = "", dec = ".", col.names = c("ClassLabels", "ActivityName"))
# features.txt: List of all features.
Features <- read.table("features.txt", header = FALSE, sep = "", dec = ".", col.names = c("ID", "FeatureName"))
# subset of all the ID satisfying condition 2.
FeaturesFiltered <- grep("(mean|std)\\(\\)", Features[, "FeatureName"])
# select only rows satisfying condition 2.
ValidMeasures <- Features[FeaturesFiltered, "FeatureName"]
# clean up the vector
ValidMeasures <- gsub('[()]', '', ValidMeasures)
combined[["Activity"]] <- factor(combined[, "Activity"]
, levels = ActivityLabels[["ClassLabels"]]
, labels = ActivityLabels[["ActivityName"]])
View(combined)
View(ActivityLabels)
factor(letters[1:20], labels = "letter")
df <- setNames(data.frame(as.list(1:5)), LETTERS[1:5])
View(df)
df <- setNames(data.frame(as.list(1:10),5,2), LETTERS[1:5])
df <- setNames(data.frame(as.list(1:10),5,2), LETTERS[1:10])
df <- setNames(data.frame(as.list(1:10),5), LETTERS[1:10])
df <- setNames(data.frame(as.list(1:10),5,2), LETTERS[1:5])
df <- setNames(data.frame(as.list(1:5)), LETTERS[1:5])
df[["A"]] <- 100
df["A"] <- 100
df["A"] <- 1001
df2 <- setNames(data.frame(as.list(1:5)), LETTERS[1:5])
df3 <- rbind(df,df2)
View(df3)
df3["A"] <- 9
View(ActivityLabels)
# I can use factor function (function to format code-labels)
ds_Driver["Activity"] <- factor(ds_Driver[, "Activity"],
levels = ActivityLabels["classLabels"],
labels = ActivityLabels["ActivityName"])
# I can use factor function (function to format code-labels)
ds_Driver["Activity"] <- factor(ds_Driver[, "Activity"],
levels = ActivityLabels["ClassLabels"],
labels = ActivityLabels["ActivityName"])
View(ds_Driver)
View(ActivityLabels)
View(ActivityLabels)
View(ds_Driver)
ds_Driver <- rbind(ds_Train, ds_Test)
# I can use factor function (function to format code-labels)
ds_Driver[["Activity"]] <- factor(ds_Driver[, "Activity"],
levels = ActivityLabels["ClassLabels"],
labels = ActivityLabels["ActivityName"])
View(ds_Driver)
# now that i have tidy dataset, i can append them
ds_Driver <- rbind(ds_Train, ds_Test)
# I can use factor function (function to format code-labels)
ds_Driver[["Activity"]] <- factor(ds_Driver[, "Activity"],
levels = ActivityLabels[["ClassLabels"]],
labels = ActivityLabels[["ActivityName"]])
View(ds_Driver)
ds_Driver[["IDSubject"]] <- as.factor(ds_Driver[, "IDSubject"])
View(ds_Driver)
#
ds_Driver <- melt(data = ds_Driver, id = c("IDSubject", "Activity"))
library(dplyr, reshape2)
View(ds_Driver)
# calling melt unction to traspose measures
ds_Driver <- melt(ds_Driver, id = c("IDSubject", "Activity"))
mtcasrs
mtcasr
mtcars
str(mtcars)
mtcars$carname <- rownames(mtcars)
mtcars
calmelt <- melt(mtcars, id = c("carname","gear", "cyl"))
library(dplyr, reshape2)
Packages <- c("dplyr", "reshape2")
lapply(Packages, library, character.only = TRUE)
install.packages("reshape2")
Packages <- c("dplyr", "reshape2")
lapply(Packages, library, character.only = TRUE)
ds_Driver <- melt(ds_Driver, id = c("IDSubject", "Activity"))
View(ds_Driver)
View(ds_Driver)
View(ds_Driver)
# now i can use dcast function to perform computations
ds_Driver <- dcast(ds_Driver, IDSubject + Activity ~ variable, fun.aggregate = mean)
View(ds_Driver)
fwrite(x = ds_Driver, file = "tidyData.txt", quote = FALSE)
# write output on the outfile
write.table(ds_Driver, file = "tidyData.txt", sep = ",", row.names = FALSE)
